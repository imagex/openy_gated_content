<?php

/**
 * @file
 * Installation file.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install().
 */
function openy_gc_auth_custom_install() {
  _update_user_permissions();
}

/**
 * Add new base fields definitions for the gc_auth_custom_user.
 */
function openy_gc_auth_custom_update_8001() {
  $bundle_of = 'gc_auth_custom_user';
  $definition_manager = \Drupal::entityDefinitionUpdateManager();
  $status = BaseFieldDefinition::create('boolean')
    ->setLabel(t('User status'))
    ->setDescription(t('Whether the gc_auth_custom_user is verified or blocked.'))
    ->setDefaultValue(FALSE);
  $verification_time = BaseFieldDefinition::create('timestamp')
    ->setLabel(t('Verification time'))
    ->setDescription(t('The time at which the verification email was sent.'))
    ->setDefaultValue(NULL);
  $verification_token = BaseFieldDefinition::create('string')
    ->setLabel(t('Verification token'))
    ->setDescription(t('The token that gc_auth_custom_user for account activation.'))
    ->setDefaultValue(NULL);

  // Install the new definitions.
  $definition_manager->installFieldStorageDefinition('status', $bundle_of, $bundle_of, $status);
  $definition_manager->installFieldStorageDefinition('verification_time', $bundle_of, $bundle_of, $verification_time);
  $definition_manager->installFieldStorageDefinition('verification_token', $bundle_of, $bundle_of, $verification_token);
}

/**
 * Set proper permissions to access the new rest endpoint.
 */
function openy_gc_auth_custom_update_8002() {
  $config_dir = drupal_get_path('module', 'openy_gc_auth_custom');
  $config_dir .= '/config/install/';
  // Import new configuration.
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs([
    'rest.resource.openy_gc_auth_custom_confirm',
    'views.view.virtual_y_users',
  ]);

  _update_user_permissions();
}

/**
 * Set proper permissions to access the rest endpoints.
 */
function _update_user_permissions() {
  $roles = Role::loadMultiple([
    RoleInterface::ANONYMOUS_ID,
    RoleInterface::AUTHENTICATED_ID,
  ]);
  $permissions = [
    'restful post openy_gc_auth_custom',
    'restful post openy_gc_auth_custom_confirm',
  ];
  foreach ($permissions as $permission) {
    foreach ($roles as $role) {
      $role->grantPermission($permission);
      $role->save();
    }
  }
}

/**
 * Use 'administer gated content configuration' permission in virtual_y_users.
 */
function openy_gc_auth_custom_update_8003() {
  $config_dir = drupal_get_path('module', 'openy_gc_auth_custom');
  $config_dir .= '/config/install/';
  // Import new configuration.
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs([
    'views.view.virtual_y_users',
  ]);
}

/**
 * Use user entity instead of custom im migration.
 */
function openy_gc_auth_custom_update_8004() {
  $config_dir = drupal_get_path('module', 'openy_gc_auth_custom');
  $config_dir .= '/config/install/';
  // Import new configuration.
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs([
    'migrate_plus.migration.gc_auth_custom_users',
  ]);

  // Delete deprecated configs.
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('rest.resource.openy_gc_auth_custom')->delete();
  $config_factory->getEditable('rest.resource.openy_gc_auth_custom_confirm')->delete();
  $config_factory->getEditable('views.view.virtual_y_users')->delete();
}

/**
 * Update migration configs according to migrate_source_csv:v3.
 */
function openy_gc_auth_custom_update_8006() {
  $config_dir = drupal_get_path('module', 'openy_gc_auth_custom');
  $config_dir .= '/config/install/';
  // Import new configuration.
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs([
    'migrate_plus.migration.gc_auth_custom_users',
    'migrate_plus.migration_group.gc_auth',
  ]);
}

/**
 * Add value for require_email_verification setting.
 */
function openy_gc_auth_custom_update_8007(&$sandbox) {
  \Drupal::configFactory()
    ->getEditable('openy_gc_auth.provider.custom')
    ->set('require_email_verification', 0)
    ->save();
}
